import Data.List (sort, foldl')
import Data.Char (digitToInt)
import Data.List.Split
import Utils
import qualified Data.Set as S
import Grid
import Data.Either
import Debugging

chars :: Int
--chars = 40
chars = 10091

type Rock = [Point]
type RockTower = S.Set Point
data Wind = L | R deriving (Show)
data FallingRock = FallingRock { rock :: Rock, settled :: Bool } deriving (Show)

data State = State { tower :: RockTower, move :: Int } deriving (Show)

rocks :: [Rock]
rocks = [[(3, 0), (4, 0), (5, 0), (6, 0)]
       , [(4, 0), (3, 1), (4, 1), (5, 1), (4, 2)]
       , [(3, 0), (4, 0), (5, 0), (5, 1), (5, 2)]
       , [(3, 0), (3, 1), (3, 2), (3, 3)]
       , [(3, 0), (4, 0), (3, 1), (4, 1)]
       ]

moveViaWind :: Wind -> Point -> Point
moveViaWind w = addX translation
  where translation = case w of
                        L -> -1
                        R -> 1

dropOne :: Point -> Point
dropOne = addY (-1)

height :: RockTower -> Int
height = foldr (max . snd) 0 . S.elems

applyWind :: RockTower -> Rock -> Wind -> Rock
applyWind tower rock wind =
  let moved = map (moveViaWind wind) rock
      valid = all (\(x, _) -> 1 <= x && x <= 7) moved && all (`S.notMember` tower) moved
   in if valid then moved else rock

applyDrop :: RockTower -> Rock -> Rock
applyDrop tower rock =
  let moved = map dropOne rock
      valid = all (`S.notMember` tower) moved && all (\(_, y) -> 0 < y) moved
   in if valid then moved else rock

applyWindAndDrop :: RockTower -> Wind -> FallingRock -> FallingRock
applyWindAndDrop tower wind fallingRock =
  let windMoved = applyWind tower (rock fallingRock) wind
      dropped = applyDrop tower windMoved
      settled = dropped == windMoved
   in FallingRock {rock=dropped, settled=settled}

insertAll :: (Ord a) => [a] -> S.Set a -> S.Set a
insertAll toAdd s = foldl (flip S.insert) s toAdd

cleanTower :: RockTower -> Int -> RockTower
cleanTower tower currentHeight = S.filter ((> (currentHeight - 10)) . snd) tower

addRock :: [Wind] -> State -> Rock -> State
addRock wind state rockToAdd =
  let currentTower = tower state
      currentHeight = height (tower state)
--      startingState = traceShowIf (move state `mod` 20 == 0) state $ (FallingRock {rock=map (addY (currentHeight + 4)) rockToAdd, settled=False}, move state)
      startingState = (FallingRock {rock=map (addY (currentHeight + 4)) rockToAdd, settled=False}, move state)
      applyNextWindAndDrop fallingState =
        let currentWind = wind !! snd fallingState
         in (applyWindAndDrop currentTower currentWind (fst fallingState), snd fallingState + 1)
      (endRock, newWindIndex) = until (settled . fst) applyNextWindAndDrop startingState
   in State { tower=insertAll (rock endRock) currentTower, move=newWindIndex }

parseInput :: String -> [Wind]
parseInput = cycle . map parseWind
  where
     parseWind x = case x of
                      '<' -> L
                      '>' -> R


totals :: [[Int]] -> [Int]
totals = map sum

--part1 :: String -> Int
part1 input =
  let wind = parseInput input
      initialState = State { tower = S.empty, move=0 }
      rocks' = take 53 $ cycle rocks
   in height . tower . foldl (addRock wind) initialState $ rocks'
--   in 1
--   in tower . foldl addRock initialState $ rocks'

--part2 :: String -> Int
--part2 input =
--  let wind = parseInput input
--      initialState = State { tower = S.empty, move=0 }
--      rocks' = take 50000 $ cycle rocks
--      addRock' = addRock wind
--      heightForRocks = map (height . tower) $ scanl addRock' initialState rocks'
--      differences = map (\(a, b) -> b-a) (zipWithNext heightForRocks)
--   in differences
--   in 1

-- It reaches a stable loop with initial differences in height of
-- 3,2,1,2,1,3,2,2,0,1,3,2,0,2,1,3,3  (17 rocks, height = 31)
-- i.e. first 18 rocks give a height of 32
-- Then a recurring loop of
-- 4,0,1,2,3,0,1,1,3,2,2,0,0,2,3,4,0,1,2,1,2,0,1,2,1,2,0,1,3,2,0,0,1,3,3 (35 rocks, height = 54)

-- Mine starts with 
-- 1,3,3,0,2,1,3,2,2,0,1,2,2,0,2,1,3,3,0,2,1,2,1,0,0,1,3,0,4,2,1,3,0,3,0,0,2,2,1,1,1,3,2,4,2,1,2,1,0,1,1,3,2,0,2,1,2,3,4,2,1,3,0,3,0,1,2,3,2,2,1,3,3,0,0,1,3,2,2,0,1,2,3,2,2,1,3,3,2,2,1,3,3,2,0,0,2,2,2,0,1,3,3,2,0,1,2,1,4,0,0,1,3,0,2,1,3,3,0,0,1,3,2,2,2,1,2,3,4,2,1,3,2,1,2,1,2,1,2,2,1,3,2,4,0,1,3,0,2,0,0,2,3,0,2,1,2,2,2,2,1,3,3,2,0,1,3,2,0,0,1,3,2,4,2,1,3,3,2,0,1,3,0,3,0,0,3,0,3,0,1,2,1,2,2,1,3,2,4,2,1,3,3,0,0,1,3,2,1
-- 210 rocks - 350 height

-- And repeats with 
-- "2,1,3,0,2,0,1,3,3,0,2,1,3,2,1,2,1,3,2,0,0,1,3,3,0,0,1,3,2,0,1,0,3,0,2,2,1,3,2,2,0,1,3,2,2,2,1,2,1,4,2,1,3,2,2,0,1,3,0,2,0,1,3,2,2,0,1,3,3,0,0,1,3,2,0,0,1,3,3,2,2,1,1,2,1,0,0,3,2,2,0,1,3,2,2,0,1,2,3,2,0,1,3,2,2,0,1,3,2,1,1,1,3,3,0,0,1,1,2,2,0,1,2,2,2,2,1,3,2,0,1,1,3,3,2,2,1,2,1,1,0,1,3,2,2,0,1,2,2,2,0,1,2,1,2,0,1,3,3,4,2,1,3,3,2,0,1,3,0,4,0,0,1,3,4,0,1,3,3,0,0,1,3,0,0,2,1,3,3,4,0,0,0,1,2,0,1,3,3,0,0,1,3,0,3,0,1,2,3,2,0,1,3,2,1,0,1,2,1,0,1,1,1,3,2,0,1,3,3,0,2,1,3,3,0,0,1,3,2,4,2,1,3,3,0,0,1,3,0,2,0,0,2,1,4,0,1,3,3,0,0,1,2,1,2,2,1,3,0,3,2,1,3,2,2,0,1,3,3,0,0,1,3,3,4,0,1,2,1,2,0,1,2,2,0,0,1,3,0,0,0,1,3,2,1,0,1,3,3,2,2,1,3,3,0,0,1,2,1,4,2,1,3,3,0,0,1,3,0,3,0,1,3,3,2,2,1,3,2,4,2,1,3,3,2,2,0,3,2,0,0,1,2,3,2,2,1,3,2,0,0,1,3,3,0,0,1,3,3,0,0,1,3,2,2,0,1,3,0,3,2,1,3,0,4,0,1,2,1,3,0,1,2,2,2,0,0,3,0,3,2,1,2,2,4,0,1,3,3,2,2,1,2,3,2,0,1,3,2,2,0,1,3,3,0,2,1,2,3,0,0,0,3,2,2,0,1,3,2,4,0,1,3,3,2,2,1,3,3,0,2,0,0,3,1,1,0,3,2,0,0,1,3,3,2,0,1,3,3,0,2,1,3,0,2,0,1,3,2,2,0,1,3,3,4,0,1,3,0,3,0,0,3,2,2,0,0,2,0,4,0,0,2,3,4,2,1,3,3,2,2,1,3,2,0,0,1,2,2,2,2,1,3,3,0,2,1,3,2,2,2,1,1,2,1,1,1,3,3,0,0,1,3,0,0,2,1,3,0,2,0,1,2,3,0,2,1,3,2,0,0,1,3,0,1,0,1,3,3,0,0,1,3,3,0,0,1,3,2,0,0,1,3,2,2,0,1,3,3,2,0,1,3,3,2,2,1,3,2,2,2,1,3,2,4,0,1,3,0,4,2,1,3,2,0,2,1,3,3,4,0,1,2,3,0,1,0,3,2,1,0,0,3,2,4,0,1,3,3,0,0,0,2,3,2,2,1,3,2,4,0,1,2,3,2,0,1,0,3,0,0,1,3,3,2,0,1,2,2,4,0,0,2,2,0,0,1,3,3,4,0,0,2,2,0,0,1,2,1,3,2,0,3,3,0,0,0,2,3,0,2,1,3,0,4,2,1,2,1,0,1,1,3,2,2,0,1,3,2,4,0,1,3,0,4,2,1,3,2,4,0,1,3,3,0,2,1,3,3,0,0,1,3,2,2,2,1,3,2,2,2,1,3,2,2,0,0,2,2,2,2,1,3,2,0,0,1,0,3,0,2,1,3,3,2,0,1,3,3,0,0,1,3,3,4,0,1,3,0,3,2,1,2,1,3,0,1,3,3,0,2,1,2,2,2,0,1,3,3,2,0,1,3,0,3,0,1,3,2,4,0,1,3,2,1,0,1,3,2,0,2,1,3,0,0,0,1,3,3,2,0,1,3,2,2,0,0,2,3,4,0,1,3,3,0,0,1,3,0,2,2,0,0,3,1,2,0,3,0,3,0,1,3,3,2,0,1,3,3,0,2,1,3,3,2,2,1,3,3,0,2,1,2,2,4,0,1,3,0,3,0,0,0,1,2,2,0,3,0,3,0,1,3,2,1,0,1,3,3,4,0,1,3,3,4,0,1,3,2,1,0,0,2,3,2,2,0,0,3,2,2,1,1,3,2,2,1,2,1,2,2,1,3,2,1,0,1,2,1,2,2,1,2,2,0,0,1,3,2,0,2,1,3,3,4,0,0,2,0,0,2,1,3,2,0,0,1,3,3,0,0,1,2,3,2,0,1,2,3,2,2,1,3,2,4,2,1,3,2,1,2,0,2,0,0,2,1,2,3,2,2,1,3,2,4,0,0,2,0,3,0,1,3,3,0,0,1,3,3,0,0,1,3,3,0,0,1,2,2,0,2,0,2,3,0,0,1,3,3,0,0,1,3,2,1,1,0,3,0,4,0,1,2,1,2,0,1,2,3,0,2,1,3,3,2,0,1,3,3,2,0,1,3,3,0,2,1,3,0,3,2,1,3,3,4,2,0,2,3,0,0,1,3,0,2,2,0,3,2,0,0,1,2,1,2,0,1,3,0,3,0,1,3,3,2,2,1,2,1,4,2,1,2,3,2,2,1,2,3,0,2,1,2,3,0,0,1,3,2,0,0,1,3,2,0,2,0,0,3,2,2,0,0,2,2,2,1,2,3,2,0,1,3,3,0,0,1,3,2,4,0,0,0,2,0,0,1,3,2,1,2,1,3,3,0,2,1,3,3,2,2,1,3,0,3,0,0,3,2,4,0,1,2,3,2,0,1,3,2,2,2,1,3,2,2,0,1,2,3,2,0,1,3,3,2,0,1,3,2,0,2,1,3,3,2,2,1,3,3,4,2,1,3,3,2,0,1,3,3,2,0,0,3,2,2,2,1,0,3,4,2,1,3,3,0,0,0,2,2,2,2,1,0,1,3,0,0,2,2,0,2,1,3,3,0,0,1,2,3,2,2,0,0,1,3,0,1,3,3,0,0,1,3,2,0,0,1,3,2,4,2,1,3,2,2,2,0,0,3,0,2,1,3,0,3,0,0,2,2,1,1,1,2,3,0,0,1,2,3,0,2,1,3,2,4,0,1,2,1,2,2,1,2,3,2,2,1,2,3,0,1,1,0,3,2,2,1,0,3,2,2,1,2,3,2,2,1,2,1,2,0,0,2,2,2,0,1,0,2,2,0,1,3,2,4,2,1,3,2,4,2,1,2,1,2,2,1,3,3,0,2,0,3,2,0,0,1,3,0,3,2,1,3,2,0,2,1,3,0,4,2,1,3,3,0,2,1,2,3,4,0,1,3,3,2,0,1,3,0,3,2,1,0,3,2,2,1,3,3,2,2,0,0,3,1,2,1,3,0,4,0,1,0,3,2,0,1,3,3,2,0,1,3,3,2,0,1,0,3,1,0,1,2,2,2,2,1,3,0,4,0,1,2,1,2,0,1,1,3,0,2,1,3,2,0,1,1,2,2,2,0,1,3,2,4,0,1,3,3,4,0,1,3,0,2,2,1,3,3,0,2,1,3,3,0,2,1,0,3,4,0,1,3,3,2,2,1,3,3,0,0,0,2,0,1,0,1,1,2,1,1,1,2,1,2,0,1,3,2,4,0,1,3,3,0,0,0,2,3,0,2,1,3,0,3,0,1,2,1,2,0,1,3,3,4,0,1,2,3,4,0,1,2,3,2,0,1,3,3,4,0,1,3,3,0,0,0,0,3,1,0,0,3,3,2,2,0,0,3,2,2,1,3,2,1,1,1,3,2,4,2,1,3,3,0,2,1,2,3,4,0,0,2,2,4,2,1,3,2,2,2,1,2,1,2,2,0,0,2,4,0,1,3,2,0,0,1,3,2,2,2,1,3,3,4,0,0,2,3,0,0,0,2,2,1,2,0,1,3,2,0,1,3,2,4,2,1,3,3,2,0,1,3,2,2"
-- 1745 rocks - 2783 height

part2 input = 
  let initialPortion = "1,3,3,0,2,1,3,2,2,0,1,2,2,0,2,1,3,3,0,2,1,2,1,0,0,1,3,0,4,2,1,3,0,3,0,0,2,2,1,1,1,3,2,4,2,1,2,1,0,1,1,3,2,0,2,1,2,3,4,2,1,3,0,3,0,1,2,3,2,2,1,3,3,0,0,1,3,2,2,0,1,2,3,2,2,1,3,3,2,2,1,3,3,2,0,0,2,2,2,0,1,3,3,2,0,1,2,1,4,0,0,1,3,0,2,1,3,3,0,0,1,3,2,2,2,1,2,3,4,2,1,3,2,1,2,1,2,1,2,2,1,3,2,4,0,1,3,0,2,0,0,2,3,0,2,1,2,2,2,2,1,3,3,2,0,1,3,2,0,0,1,3,2,4,2,1,3,3,2,0,1,3,0,3,0,0,3,0,3,0,1,2,1,2,2,1,3,2,4,2,1,3,3,0,0,1,3,2,1"
      repeatingPortion = "2,1,3,0,2,0,1,3,3,0,2,1,3,2,1,2,1,3,2,0,0,1,3,3,0,0,1,3,2,0,1,0,3,0,2,2,1,3,2,2,0,1,3,2,2,2,1,2,1,4,2,1,3,2,2,0,1,3,0,2,0,1,3,2,2,0,1,3,3,0,0,1,3,2,0,0,1,3,3,2,2,1,1,2,1,0,0,3,2,2,0,1,3,2,2,0,1,2,3,2,0,1,3,2,2,0,1,3,2,1,1,1,3,3,0,0,1,1,2,2,0,1,2,2,2,2,1,3,2,0,1,1,3,3,2,2,1,2,1,1,0,1,3,2,2,0,1,2,2,2,0,1,2,1,2,0,1,3,3,4,2,1,3,3,2,0,1,3,0,4,0,0,1,3,4,0,1,3,3,0,0,1,3,0,0,2,1,3,3,4,0,0,0,1,2,0,1,3,3,0,0,1,3,0,3,0,1,2,3,2,0,1,3,2,1,0,1,2,1,0,1,1,1,3,2,0,1,3,3,0,2,1,3,3,0,0,1,3,2,4,2,1,3,3,0,0,1,3,0,2,0,0,2,1,4,0,1,3,3,0,0,1,2,1,2,2,1,3,0,3,2,1,3,2,2,0,1,3,3,0,0,1,3,3,4,0,1,2,1,2,0,1,2,2,0,0,1,3,0,0,0,1,3,2,1,0,1,3,3,2,2,1,3,3,0,0,1,2,1,4,2,1,3,3,0,0,1,3,0,3,0,1,3,3,2,2,1,3,2,4,2,1,3,3,2,2,0,3,2,0,0,1,2,3,2,2,1,3,2,0,0,1,3,3,0,0,1,3,3,0,0,1,3,2,2,0,1,3,0,3,2,1,3,0,4,0,1,2,1,3,0,1,2,2,2,0,0,3,0,3,2,1,2,2,4,0,1,3,3,2,2,1,2,3,2,0,1,3,2,2,0,1,3,3,0,2,1,2,3,0,0,0,3,2,2,0,1,3,2,4,0,1,3,3,2,2,1,3,3,0,2,0,0,3,1,1,0,3,2,0,0,1,3,3,2,0,1,3,3,0,2,1,3,0,2,0,1,3,2,2,0,1,3,3,4,0,1,3,0,3,0,0,3,2,2,0,0,2,0,4,0,0,2,3,4,2,1,3,3,2,2,1,3,2,0,0,1,2,2,2,2,1,3,3,0,2,1,3,2,2,2,1,1,2,1,1,1,3,3,0,0,1,3,0,0,2,1,3,0,2,0,1,2,3,0,2,1,3,2,0,0,1,3,0,1,0,1,3,3,0,0,1,3,3,0,0,1,3,2,0,0,1,3,2,2,0,1,3,3,2,0,1,3,3,2,2,1,3,2,2,2,1,3,2,4,0,1,3,0,4,2,1,3,2,0,2,1,3,3,4,0,1,2,3,0,1,0,3,2,1,0,0,3,2,4,0,1,3,3,0,0,0,2,3,2,2,1,3,2,4,0,1,2,3,2,0,1,0,3,0,0,1,3,3,2,0,1,2,2,4,0,0,2,2,0,0,1,3,3,4,0,0,2,2,0,0,1,2,1,3,2,0,3,3,0,0,0,2,3,0,2,1,3,0,4,2,1,2,1,0,1,1,3,2,2,0,1,3,2,4,0,1,3,0,4,2,1,3,2,4,0,1,3,3,0,2,1,3,3,0,0,1,3,2,2,2,1,3,2,2,2,1,3,2,2,0,0,2,2,2,2,1,3,2,0,0,1,0,3,0,2,1,3,3,2,0,1,3,3,0,0,1,3,3,4,0,1,3,0,3,2,1,2,1,3,0,1,3,3,0,2,1,2,2,2,0,1,3,3,2,0,1,3,0,3,0,1,3,2,4,0,1,3,2,1,0,1,3,2,0,2,1,3,0,0,0,1,3,3,2,0,1,3,2,2,0,0,2,3,4,0,1,3,3,0,0,1,3,0,2,2,0,0,3,1,2,0,3,0,3,0,1,3,3,2,0,1,3,3,0,2,1,3,3,2,2,1,3,3,0,2,1,2,2,4,0,1,3,0,3,0,0,0,1,2,2,0,3,0,3,0,1,3,2,1,0,1,3,3,4,0,1,3,3,4,0,1,3,2,1,0,0,2,3,2,2,0,0,3,2,2,1,1,3,2,2,1,2,1,2,2,1,3,2,1,0,1,2,1,2,2,1,2,2,0,0,1,3,2,0,2,1,3,3,4,0,0,2,0,0,2,1,3,2,0,0,1,3,3,0,0,1,2,3,2,0,1,2,3,2,2,1,3,2,4,2,1,3,2,1,2,0,2,0,0,2,1,2,3,2,2,1,3,2,4,0,0,2,0,3,0,1,3,3,0,0,1,3,3,0,0,1,3,3,0,0,1,2,2,0,2,0,2,3,0,0,1,3,3,0,0,1,3,2,1,1,0,3,0,4,0,1,2,1,2,0,1,2,3,0,2,1,3,3,2,0,1,3,3,2,0,1,3,3,0,2,1,3,0,3,2,1,3,3,4,2,0,2,3,0,0,1,3,0,2,2,0,3,2,0,0,1,2,1,2,0,1,3,0,3,0,1,3,3,2,2,1,2,1,4,2,1,2,3,2,2,1,2,3,0,2,1,2,3,0,0,1,3,2,0,0,1,3,2,0,2,0,0,3,2,2,0,0,2,2,2,1,2,3,2,0,1,3,3,0,0,1,3,2,4,0,0,0,2,0,0,1,3,2,1,2,1,3,3,0,2,1,3,3,2,2,1,3,0,3,0,0,3,2,4,0,1,2,3,2,0,1,3,2,2,2,1,3,2,2,0,1,2,3,2,0,1,3,3,2,0,1,3,2,0,2,1,3,3,2,2,1,3,3,4,2,1,3,3,2,0,1,3,3,2,0,0,3,2,2,2,1,0,3,4,2,1,3,3,0,0,0,2,2,2,2,1,0,1,3,0,0,2,2,0,2,1,3,3,0,0,1,2,3,2,2,0,0,1,3,0,1,3,3,0,0,1,3,2,0,0,1,3,2,4,2,1,3,2,2,2,0,0,3,0,2,1,3,0,3,0,0,2,2,1,1,1,2,3,0,0,1,2,3,0,2,1,3,2,4,0,1,2,1,2,2,1,2,3,2,2,1,2,3,0,1,1,0,3,2,2,1,0,3,2,2,1,2,3,2,2,1,2,1,2,0,0,2,2,2,0,1,0,2,2,0,1,3,2,4,2,1,3,2,4,2,1,2,1,2,2,1,3,3,0,2,0,3,2,0,0,1,3,0,3,2,1,3,2,0,2,1,3,0,4,2,1,3,3,0,2,1,2,3,4,0,1,3,3,2,0,1,3,0,3,2,1,0,3,2,2,1,3,3,2,2,0,0,3,1,2,1,3,0,4,0,1,0,3,2,0,1,3,3,2,0,1,3,3,2,0,1,0,3,1,0,1,2,2,2,2,1,3,0,4,0,1,2,1,2,0,1,1,3,0,2,1,3,2,0,1,1,2,2,2,0,1,3,2,4,0,1,3,3,4,0,1,3,0,2,2,1,3,3,0,2,1,3,3,0,2,1,0,3,4,0,1,3,3,2,2,1,3,3,0,0,0,2,0,1,0,1,1,2,1,1,1,2,1,2,0,1,3,2,4,0,1,3,3,0,0,0,2,3,0,2,1,3,0,3,0,1,2,1,2,0,1,3,3,4,0,1,2,3,4,0,1,2,3,2,0,1,3,3,4,0,1,3,3,0,0,0,0,3,1,0,0,3,3,2,2,0,0,3,2,2,1,3,2,1,1,1,3,2,4,2,1,3,3,0,2,1,2,3,4,0,0,2,2,4,2,1,3,2,2,2,1,2,1,2,2,0,0,2,4,0,1,3,2,0,0,1,3,2,2,2,1,3,3,4,0,0,2,3,0,0,0,2,2,1,2,0,1,3,2,0,1,3,2,4,2,1,3,3,2,0,1,3,2,2"
      initialPortionNum = map digitToInt . filter (/=',') $ initialPortion 
      repeatingPortionNum = map digitToInt . filter (/=',') $ repeatingPortion 
      totalHeight = 1000000000000
      initialPortionLength = length initialPortionNum
      repeatingPortionLength = length repeatingPortionNum
      (repeats, remaining) = (totalHeight - initialPortionLength) `divMod` repeatingPortionLength
      repeatingPortionHeight = repeats * sum repeatingPortionNum
      remainingHeight = sum . take remaining $ repeatingPortionNum
   in sum initialPortionNum + remainingHeight + repeatingPortionHeight

main :: IO ()
main = solve "17" part1 part2
